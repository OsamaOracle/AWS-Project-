---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy a secure and highly available EC2 instance with cutom request echo application in an autoscaling group'
Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 19
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  Emails:
    Description: 'Enter emails to send CloudWatch alarm notifications to'
    Type: String
    Default: "o.mustafaoracle@yahoo.com"
  EC2ImageID:
    Description: 'Select Ubuntu 18.04 LTS image type for Echo Request application EC2 in EU-West-1 (Ireland) region. AMI IDs for other regions will be different'
    Type: AWS::EC2::Image::Id
    Default: ami-02df9ea15c1778c9c
  NginxListeningPort:
    Description: 'Port on which Nginx server is listening'
    Type: Number
    Default: 3333
  ApplicationListeningPort:
    Description: 'Port on which Echo application is listening'
    Type: Number
    Default: 8080
  WhiteListedCIDRForSSH:
    Description: 'IP CIDR allowed to SSH into EC2 via Security Group'
    Type: String
    Default: 0.0.0.0/0
  EC2InstanceType:
    Description: 'EC2 instance type for Echo request application'
    Type: String
    Default: t2.micro
  SSHPublicKey:
    Description: 'SSH key pair for user custom admin user'
    Type: String
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA0v8IaRtSlyZuSoRmrYPKMA8oKVbzqAYloBmM
v90lem67+//3jfdO+xMDJyKvZKcHeg8Zx/ZFIP6poGWc63nGwQW6zrfH/isvxPg9
nKVZP3t5pZ6GR1aBVrGTuiogiQhmyPW8wzy2vDzim8l2vyoD6f4xW5mLQ5s+S0Ew
wciVYWs6sah6gdMrOraXfSYJo5LLa0P6VSlnJbTrqGUzLvGmH9iwwNFfqrMJQf+v
FKeebfMSTR2oHN/rQcfDywUOqd4jb4KIncKiEHHnqs4cXmOUKlKO2Dke2DM1Rbvc
kb9oAOq/EzuF067T3MwzYcMDuIikf1GMZ1TUo5H2bEdRkJRHYw==
  ASGMinCount:
    Description: Minimum number of instances in Autoscaling group
    Type: String
    Default: "1"
  ASGMaxCount:
    Description: Maximum number of instances in Autoscaling group
    Type: String
    Default: "2"
  UserNameAdmin:
    Description: Username of the custom admin user. SSH allowed
    Default: custom_user_1
    Type: String
  UserNameRestricted:
    Description: Username of the custom restricted user. No SSH allowed
    Default: custom_restricted_user_1
    Type: String
  URL1RestrictedUser:
    Description: "https://url to restricted user creation file"
    Type: String
    Default: "https://osamaoracle.s3.eu-west-2.amazonaws.com/Hardening/restricted_user.sh"
  URL2ConfFail2Ban:
    Description: "https://url to fail2ban configuration file" 
    Type: String
    Default: "https://osamaoracle.s3.eu-west-2.amazonaws.com/Hardening/jail.local"
  URL3ConfNginx:
    Description: "https://url to nginx configuration file" 
    Type: String
    Default: "https://osamaoracle.s3.eu-west-2.amazonaws.com/Hardening/nginx-general.conf"
  URL4ConfCWAgent:
    Description: "https://url to CloudWatch agent configuration file" 
    Type: String
    Default: "https://osamaoracle.s3.eu-west-2.amazonaws.com/Logging/cwagent-config-2.json"
  URL5ConfCWHelperScript:
    Description: "https://url to CloudWatch Helper Scripts file" 
    Type: String
    Default: "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
  URL6EchoApp:
    Description: "https://url to echo application files" 
    Type: String
    Default: "https://github.com/OsamaOracle/echo_server_flask.git"
  URL7CWAgent:
    Description: "https://url to CloudWatch Agent file" 
    Type: String
    Default: "https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb"
  BanTimeSSH:
    Description: Ban time in seconds for IPs bruteforcing on SSH port
    Type: String
    Default: 300
  BanTimeApp:
    Description: Ban time in seconds for IPs bruteforcing on Application/Nginx port
    Type: String
    Default: 600
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A public'
      - Key: Reach
        Value: public
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Reach
        Value: public
  RouteTableAPublic: # should be RouteTableAPublic, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A Public'
  RouteTableBPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B Public'
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic
  RouteTableAPublicInternetRoute: # should be RouteTablePublicAInternetRoute, but logical id was not changed for backward compatibility
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTableBPublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryIn1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOut1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  EchoRequestEC2Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Description: Role to control Echo request application EC2 instances
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: EchoRequestEC2Role
  EchoRequestEC2RoleInstanceProfile:
   Type: "AWS::IAM::InstanceProfile"
   Properties:
     Path: "/"
     Roles:
       - !Ref EchoRequestEC2Role
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !Ref Emails
          Protocol: email
      TopicName: SERAAutoScalingNotificationGroup
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for Echo request application
      GroupName: SERA
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound
          IpProtocol: -1
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound
          IpProtocol: tcp
          FromPort: !Ref NginxListeningPort
          ToPort: !Ref NginxListeningPort
        - CidrIp: !Ref WhiteListedCIDRForSSH
          Description: Allow SSH from whitelisted CIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId: !Ref VPC
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - Ebs:
              VolumeSize: 14
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        IamInstanceProfile: 
          Name: !Ref EchoRequestEC2RoleInstanceProfile
        ImageId: !Ref EC2ImageID
        InstanceType: !Ref EC2InstanceType
        SecurityGroupIds: 
          - !GetAtt EC2SecurityGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Create custom admin user
            sudo mkdir -p /home/${UserNameAdmin}
            sudo usermod -l ${UserNameAdmin} -d /home/${UserNameAdmin} -m ubuntu
            sudo groupmod -n custom_admins_group ubuntu
            sudo cp /home/ubuntu/* /home/${UserNameAdmin}/
            sudo cp /home/ubuntu/.* /home/${UserNameAdmin}/
            sudo rm -r /home/ubuntu
            sudo cp /etc/sudoers.d/90-cloud-init-users /etc/sudoers.d/custom_admins_group
            sudo sed -i 's/ubuntu/%custom_admins_group/g' /etc/sudoers.d/custom_admins_group
            sudo rm /etc/sudoers.d/90-cloud-init-users
            echo "=============> Custom admin user ${UserNameAdmin} created..."
            # Setup key pair for user ${UserNameAdmin}
            mkdir -p /home/${UserNameAdmin}/.ssh
            echo "${SSHPublicKey}" | tee -a /home/${UserNameAdmin}/.ssh/authorized_keys
            echo "=============> Key pair has been setup for user ${UserNameAdmin}..."
            # Upgrade system
            sudo apt update
            echo "=============> Packages updated..."
            sudo apt install python-pip python3-pip python-setuptools unzip nginx collectd-core fail2ban sendmail -y
            echo "=============> Packages installed via apt..."
            pip3 install awscli virtualenv python-crontab
            echo "=============> Packages installed via pip3..."
            # Install CloudFormation Helper Scripts
            mkdir -p /opt/aws/bin
            cd /tmp
            wget ${URL5ConfCWHelperScript}
            easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
            echo "=============> CloudFormation Helper Script setup..."
            # Setup echo project
            cd /tmp
            git clone ${URL6EchoApp}
            ## Install app and execute for the first time
            cd flask-echo-server
            python3 setup.py install
            cd ..
            flask-echo --port ${ApplicationListeningPort} &
            sleep 5
            echo "=============> Echo application executed for the first time..."
            ## Setup root editor for crontab
            echo "SELECTED_EDITOR='/bin/nano'" | tee -a /root/.selected_editor
            ## Setup application execution on system reboot
            mkdir -p /root/scripts
            echo "# sleep 45 seconds for major services to come online..." | tee -a /root/scripts/echo-server-up.sh
            echo "sleep 45" | tee -a /root/scripts/echo-server-up.sh
            echo "# Start Application..." | tee -a /root/scripts/echo-server-up.sh
            echo "/usr/local/bin/flask-echo --port ${ApplicationListeningPort} &" | tee -a /root/scripts/echo-server-up.sh
            echo "# sleep 5 seconds that's just how this reboot cronjob works..." | tee -a /root/scripts/echo-server-up.sh
            echo "sleep 5" | tee -a /root/scripts/echo-server-up.sh
            echo "# echo something because that is how it works from crontab..." | tee -a /root/scripts/echo-server-up.sh
            echo "echo yes" | tee -a /root/scripts/echo-server-up.sh
            python3 -c "from crontab import CronTab;cron = CronTab(user='root');job = cron.new(command='/bin/bash /root/scripts/echo-server-up.sh; sleep 5; echo yes');job.every_reboot();cron.write();"
            echo "=============> Crontab setup complete..."
            # Setup Nginx
            sudo rm /etc/nginx/sites-enabled/default
            ## Create nginx configuration file
            echo "server {" | tee -a /etc/nginx/sites-available/echo
            echo "        listen 3333;" | tee -a /etc/nginx/sites-available/echo
            echo "        location / {" | tee -a /etc/nginx/sites-available/echo
            echo "            proxy_pass http://localhost:8080;" | tee -a /etc/nginx/sites-available/echo
            echo "        }" | tee -a /etc/nginx/sites-available/echo
            echo "    }" | tee -a /etc/nginx/sites-available/echo
            sudo ln -s /etc/nginx/sites-available/echo /etc/nginx/sites-enabled/echo
            sleep 5
            sudo systemctl enable nginx; sleep 5; echo yes
            sudo service nginx start; sleep 5; echo yes
            echo "=============> Nginx setup and started..."
            # Hardening
            ## Setup fail2ban
            wget ${URL2ConfFail2Ban} -O /etc/fail2ban/jail.local
            sed -i 's/root@localhost/${Emails}/g' /etc/fail2ban/jail.local
            sed -i 's/root@<fq-hostname>/root@localhost.com/g' /etc/fail2ban/jail.local
            sed -i 's/bantime = 601/${BanTimeSSH}/g' /etc/fail2ban/jail.local
            sed -i 's/bantime = 602/${BanTimeApp}/g' /etc/fail2ban/jail.local
            wget ${URL3ConfNginx} -O /etc/fail2ban/filter.d/nginx-general.conf
            sudo systemctl enable fail2ban.service
            sleep 5
            sudo service fail2ban start
            sleep 5
            echo "=============> Fail2ban setup..."
            # Setup Logging
            ## Setup CloudWatch Agent
            cd /tmp
            wget ${URL7CWAgent}
            sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
            usermod -aG adm cwagent
            ## Setup CloudWatch agent credentials file
            mkdir -p /home/cwagent/.aws/
            echo "[AmazonCloudWatchAgent]" | tee -a /home/cwagent/.aws/config
            echo "output = text" | tee -a /home/cwagent/.aws/config
            echo "region = ${AWS::Region}" | tee -a /home/cwagent/.aws/config
            wget ${URL4ConfCWAgent} -O /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            sudo systemctl enable amazon-cloudwatch-agent.service
            sudo service amazon-cloudwatch-agent start
            sleep 5
            echo "=============> CloudWatch agent setup..."
            # # Setup cron job for automatic patching
            # aws ssm start-automation-execution --document-name "AWS-PatchAsgInstance" --document-version "\$DEFAULT" --parameters '{"WaitForReboot":["PT5M"],"WaitForInstance":["PT2M"]}' --region ${AWS::Region}
            # Setup a restricted user
            wget ${URL1RestrictedUser} -O /tmp/restricted_user.sh
            sed -i 's/restricted_user_1/${UserNameRestricted}/g' /tmp/restricted_user.sh
            /bin/bash /tmp/restricted_user.sh
            echo "=============> Restricted user setup..."
            python3 -c "from crontab import CronTab;cron = CronTab(user='root');job = cron.new(command='sudo apt update; sleep 5; sudo apt upgrade -y; sleep 5; echo yes');job.every().month();cron.write();"
            echo "=============> Crontab to update system packages every week..."
            # System reboot
            shutdown -r now
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: Echo Request Application AutoScaling Group
      AvailabilityZones: 
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
      DesiredCapacity: !Ref ASGMinCount
      LaunchTemplate: 
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref ASGMaxCount
      MetricsCollection: 
        - Granularity: 1Minute
      MinSize: !Ref ASGMinCount
      NotificationConfigurations: 
        - NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
          - autoscaling:TEST_NOTIFICATION
          TopicARN: !Ref SNSTopic
      VPCZoneIdentifier: 
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EC2AutoScalingGroup
      Cooldown: '1'
      ScalingAdjustment: 1
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EC2AutoScalingGroup
      Cooldown: '1'
      ScalingAdjustment: -1
  CPUAlarmHigh:
   Type: AWS::CloudWatch::Alarm
   Properties:
     EvaluationPeriods: 1
     Statistic: Average
     Threshold: 80
     AlarmDescription: Go in Alarm is memory is higher than 80% for 300 seconds
     Period: 300
     AlarmActions:
      - !Ref ScaleUpPolicy
      - !Ref SNSTopic
     Namespace: AWS/EC2
     Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref EC2AutoScalingGroup
     ComparisonOperator: GreaterThanThreshold
     MetricName: CPUUtilization
  CPUAlarmLow:
   Type: AWS::CloudWatch::Alarm
   Properties:
     EvaluationPeriods: 1
     Statistic: Average
     Threshold: 40
     AlarmDescription: Go in Alarm is memory is lower than 40% for 300 seconds
     Period: 300
     AlarmActions:
      - !Ref ScaleDownPolicy
      - !Ref SNSTopic
     Namespace: AWS/EC2
     Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref EC2AutoScalingGroup
     ComparisonOperator: LessThanThreshold
     MetricName: CPUUtilization

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref RouteTableAPublic, !Ref RouteTableBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  RouteTableAPublic:
    Description: 'Route table A public.'
    Value: !Ref RouteTableAPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPublic'
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  RouteTableBPublic:
    Description: 'Route table B public.'
    Value: !Ref RouteTableBPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPublic'